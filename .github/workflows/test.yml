name: 🧪 Tests & Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: |
        # Clean install with legacy peer deps to handle old react-scripts version
        npm ci --legacy-peer-deps || npm install --legacy-peer-deps
    
    - name: 🔍 Run linting
      run: npm run lint
    
    - name: 🧪 Run tests with coverage
      run: npm run test:ci
      env:
        CI: true
        REACT_APP_CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: 📈 Coverage Report
      if: always()
      run: |
        echo "## Test Coverage Report"
        echo "```"
        npx nyc report --reporter=text-summary || echo "Coverage report not available"
        echo "```"
    
    - name: ✅ Coverage Gate Check
      run: |
        if [ -f "coverage/coverage-summary.json" ]; then
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.statements.pct' 2>/dev/null || echo "0")
          MIN_COVERAGE=60
          
          echo "Current coverage: ${COVERAGE}%"
          echo "Minimum required: ${MIN_COVERAGE}%"
          
          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "❌ Coverage is below minimum threshold"
            exit 1
          else
            echo "✅ Coverage meets minimum threshold"
          fi
        else
          echo "⚠️ Coverage file not found, skipping coverage check"
        fi
    
    - name: 💬 Comment PR with Coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let coverage = 'Coverage report not available';
          
          try {
            const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            coverage = `
            ## 📊 Test Coverage Report
            
            | Type | Coverage |
            |------|----------|
            | Statements | ${summary.total.statements.pct}% |
            | Branches | ${summary.total.branches.pct}% |
            | Functions | ${summary.total.functions.pct}% |
            | Lines | ${summary.total.lines.pct}% |
            `;
          } catch (e) {
            console.log('Could not read coverage summary');
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverage
          });